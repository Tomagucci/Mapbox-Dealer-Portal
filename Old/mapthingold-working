$(document).ready(function() {
    $(".locations-map_wrapper").removeClass("is--show");

    function isMobileDevice() {
        return ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0);
    }

        //-----------MAPBOX SETUP CODE BELOW-----------

    // Replace with your access token
    mapboxgl.accessToken = "pk.eyJ1IjoiYmFkZXhlYyIsImEiOiJjbHR6ejNxZm8wNTlmMmpsb21meW9tcWxpIn0.hPrtQWtl6vIeQWekmLWexQ";

    let mapLocations = {
        type: "FeatureCollection",
        features: [],
    };

    // Initialize map
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/badexec/clu1r5ru2000h01q53ss8316y',
        center: [-74.657884, 39.719790],
        zoom: 30,
        projection: 'globe'
    });

    let mq = window.matchMedia("(min-width: 480px)");
    if (mq.matches) {
        map.setZoom(6.59);
    } else {
        map.setZoom(6);
    }

    // Add Navigation Control to the map
    map.addControl(new mapboxgl.NavigationControl());

    // Add Geolocate Control to the map
    map.addControl(
        new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true // Enables high-accuracy GPS positioning if available
            },
            trackUserLocation: true, // Continuously updates the device's current location
            showUserHeading: true    // Shows which direction the device is facing
        })
    );

    function getGeoData() {
        let listLocations = document.getElementById("location-list").childNodes;
        listLocations.forEach(function(location, i) {
            let locationLat = location.querySelector("#locationLatitude").value;
            let locationLong = location.querySelector("#locationLongitude").value;
            let locationInfo = location.querySelector(".locations-map_card").innerHTML;
            let locationZip = location.querySelector("#zipCode").value; // Get the zip code
            let coordinates = [locationLong, locationLat];
            let locationID = location.querySelector("#locationID").value;
            let geoData = {
                type: "Feature",
                geometry: { type: "Point", coordinates: coordinates },
                properties: {
                    id: locationID,
                    description: locationInfo,
                    zip: locationZip,  // Store the zip code in the properties
                    arrayID: i,
                },
            };
            if (!mapLocations.features.some(feature => feature.properties.id === geoData.properties.id)) {
                mapLocations.features.push(geoData);
            }
        });
    }
    
    getGeoData();

    // Adds the Geolocation tags for each location and adds a mappoint
    function addMapPoints() {
        map.addLayer({
            id: "locations",
            type: "circle",
            source: {
                type: "geojson",
                data: mapLocations,
            },
            paint: {
                "circle-radius": 8,
                "circle-stroke-width": 1,
                "circle-color": "#eebe49",
                "circle-opacity": 1,
                "circle-stroke-color": "#eebe49",
            },
        });

        if (isMobileDevice()) {
            map.on("touchstart", "locations", handleLocationClick);
        } else {
            map.on("click", "locations", handleLocationClick);
        }
    }

    map.on("load", function(e) {
        addMapPoints();
    });

    function handleLocationClick(e) {
        const ID = e.features[0].properties.arrayID;
        addPopup(e);
        $(".locations-map_wrapper").addClass("is--show");
        $(".locations-map_item").removeClass("is--show");
        $(".locations-map_item").eq(ID).addClass("is--show");
    }

    function addPopup(e) {
        const coordinates = e.features[0].geometry.coordinates.slice();
        const description = e.features[0].properties.description;
        new mapboxgl.Popup().setLngLat(coordinates).setHTML(description).addTo(map);
    }

    // User Zipcode Search Filter Functions
    $('#btn-zipSearch').click(function() {
        let userZip = $('#input-searchField').val();
        updateMapPoints(userZip);
    });    
    
    // Resets the map coordinate colors
    $("#btn-zipClear").click(function() {
        $("#input-searchField").val('');  // Clear the current value
        $("#input-searchField").attr('placeholder', 'Enter Zip Code');  // Reset the placeholder
        resetMapPoints();  // Call to reset the map points
    });
    
    
    function updateMapPoints(userZip) {
        const relevantFeatures = mapLocations.features.filter(feature => feature.properties.zip === userZip);
    
        if (relevantFeatures.length) {
            map.getSource('locations').setData({
                type: 'FeatureCollection',
                features: relevantFeatures
            });
    
            map.setPaintProperty('locations', 'circle-radius', ['interpolate', ['linear'], ['zoom'], 15, 12, 22, 24]);
            map.setPaintProperty('locations', 'circle-color', '#ffffff');

        } else {
            console.log('No locations found for this zip code.');
            // Optionally, alert the user that no matching zip code was found
            alert("No locations found for the entered zip code.");
        }
    }

    // Restore Map points to regular look after pressing X /Clear on filter
    function resetMapPoints() {
        map.getSource('locations').setData(mapLocations); // Reset data to original
        map.setPaintProperty('locations', 'circle-radius', 8);
        map.setPaintProperty('locations', 'circle-color', '#eebe49');
    }    

    // Tab that closes the sidebar for the Location Card Shown
    $(".close-block").click(function() {
        $(".locations-map_wrapper").removeClass("is--show");
    });

    // Hover functionality to change cursor style as a UI indicator
    const hoverPopup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
    });

    map.on('mouseenter', 'locations', (e) => {
        map.getCanvas().style.cursor = 'pointer';
        hoverPopup.setLngLat(e.features[0].geometry.coordinates.slice()).setHTML(e.features[0].properties.description).addTo(map);
    });

    map.on('mouseleave', 'locations', () => {
        map.getCanvas().style.cursor = '';
        hoverPopup.remove();
    });
});